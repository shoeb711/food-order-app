{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shaikh Shoeb\\\\Desktop\\\\food-order-app\\\\src\\\\components\\\\Cart\\\\CheckOut.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport classes from './CheckOut.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isEmpty = value => value.trim() === '';\n\nconst isFiveChar = value => value.trim().length === 5;\n\nconst CheckOut = props => {\n  _s();\n\n  const [formValidity, setFormValidity] = useState({\n    name: true,\n    street: true,\n    postalCode: true,\n    city: true\n  });\n  const nameInputRef = useRef();\n  const streetInputRef = useRef();\n  const postalCodeInputRef = useRef();\n  const cityInputRef = useRef();\n\n  const confirmHandler = event => {\n    event.preventDefault();\n    const enteredName = nameInputRef.current.value;\n    const enteredStreet = streetInputRef.current.value;\n    const enteredPostalCode = postalCodeInputRef.current.value;\n    const enteredCity = cityInputRef.current.value;\n    const enteredNameIsValid = !isEmpty(enteredName);\n    const enteredStreetIsValid = !isEmpty(enteredStreet);\n    const enteredPostalCodeIsValid = isFiveChar(enteredPostalCode);\n    const enteredCityIsValid = !isEmpty(enteredCity);\n    setFormValidity({\n      name: enteredNameIsValid,\n      street: enteredStreetIsValid,\n      postalCode: enteredPostalCodeIsValid,\n      city: enteredCityIsValid\n    });\n    const formIsValid = enteredNameIsValid && enteredStreetIsValid && enteredPostalCodeIsValid && enteredCityIsValid;\n\n    if (!formIsValid) {\n      return;\n    }\n\n    props.onConfirm({\n      name: enteredName,\n      street: enteredStreet,\n      postalCode: enteredPostalCode,\n      city: enteredPostalCode\n    });\n  };\n\n  const nameInputClasses = `${classes.control} ${formValidity.name ? '' : classes.invalid}`;\n  const streetInputClasses = `${classes.control} ${formValidity.street ? '' : classes.invalid}`;\n  const postalCodeInputClasses = `${classes.control} ${formValidity.postalCode ? '' : classes.invalid}`;\n  const cityInputClasses = `${classes.control} ${formValidity.city ? '' : classes.invalid}`;\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    onSubmit: confirmHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: nameInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), !formValidity.name && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please Enter a Valid Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: streetInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"street\",\n        children: \"Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"street\",\n        ref: streetInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), !formValidity.street && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please Enter a Valid Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: postalCodeInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postal\",\n        children: \"Postal Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postal\",\n        ref: postalCodeInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), !formValidity.postalCode && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please Enter a Valid Postal Code (atleast 5 digit)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 38\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cityInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\",\n        ref: cityInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), !formValidity.city && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please Enter a Valid City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.submit,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CheckOut, \"JEJZFvs92Cx7mVKUkB8wFy7mPLc=\");\n\n_c = CheckOut;\nexport default CheckOut;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckOut\");","map":{"version":3,"sources":["C:/Users/Shaikh Shoeb/Desktop/food-order-app/src/components/Cart/CheckOut.js"],"names":["useRef","useState","classes","isEmpty","value","trim","isFiveChar","length","CheckOut","props","formValidity","setFormValidity","name","street","postalCode","city","nameInputRef","streetInputRef","postalCodeInputRef","cityInputRef","confirmHandler","event","preventDefault","enteredName","current","enteredStreet","enteredPostalCode","enteredCity","enteredNameIsValid","enteredStreetIsValid","enteredPostalCodeIsValid","enteredCityIsValid","formIsValid","onConfirm","nameInputClasses","control","invalid","streetInputClasses","postalCodeInputClasses","cityInputClasses","form","actions","onCancel","submit"],"mappings":"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","sourcesContent":["import { useRef, useState } from 'react';\r\nimport classes from './CheckOut.module.css';\r\n\r\nconst isEmpty = (value) => value.trim() === '';\r\nconst isFiveChar = (value) => value.trim().length === 5;\r\n\r\nconst CheckOut = (props) => {\r\n  const [formValidity, setFormValidity] = useState({\r\n    name: true,\r\n    street: true,\r\n    postalCode: true,\r\n    city: true,\r\n  });\r\n\r\n  const nameInputRef = useRef();\r\n  const streetInputRef = useRef();\r\n  const postalCodeInputRef = useRef();\r\n  const cityInputRef = useRef();\r\n\r\n  const confirmHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const enteredName = nameInputRef.current.value;\r\n    const enteredStreet = streetInputRef.current.value;\r\n    const enteredPostalCode = postalCodeInputRef.current.value;\r\n    const enteredCity = cityInputRef.current.value;\r\n\r\n    const enteredNameIsValid = !isEmpty(enteredName);\r\n    const enteredStreetIsValid = !isEmpty(enteredStreet);\r\n    const enteredPostalCodeIsValid = isFiveChar(enteredPostalCode);\r\n    const enteredCityIsValid = !isEmpty(enteredCity);\r\n\r\n    setFormValidity({\r\n      name: enteredNameIsValid,\r\n      street: enteredStreetIsValid,\r\n      postalCode: enteredPostalCodeIsValid,\r\n      city: enteredCityIsValid,\r\n    });\r\n\r\n    const formIsValid =\r\n      enteredNameIsValid &&\r\n      enteredStreetIsValid &&\r\n      enteredPostalCodeIsValid &&\r\n      enteredCityIsValid;\r\n\r\n    if (!formIsValid) {\r\n      return;\r\n    }\r\n    props.onConfirm({\r\n      name : enteredName,\r\n      street : enteredStreet,\r\n      postalCode : enteredPostalCode,\r\n      city : enteredPostalCode\r\n    })\r\n  };\r\n\r\n  const nameInputClasses = `${classes.control} ${\r\n    formValidity.name ? '' : classes.invalid\r\n  }`;\r\n  const streetInputClasses = `${classes.control} ${\r\n    formValidity.street ? '' : classes.invalid\r\n  }`;\r\n  const postalCodeInputClasses = `${classes.control} ${\r\n    formValidity.postalCode ? '' : classes.invalid\r\n  }`;\r\n  const cityInputClasses = `${classes.control} ${\r\n    formValidity.city ? '' : classes.invalid\r\n  }`;\r\n\r\n  return (\r\n    <form className={classes.form} onSubmit={confirmHandler}>\r\n      <div className={nameInputClasses}>\r\n        <label htmlFor='name'>Your Name</label>\r\n        <input type='text' id='name' ref={nameInputRef} />\r\n        {!formValidity.name && <p>Please Enter a Valid Name</p>}\r\n      </div>\r\n      <div className={streetInputClasses}>\r\n        <label htmlFor='street'>Street</label>\r\n        <input type='text' id='street' ref={streetInputRef} />\r\n        {!formValidity.street && <p>Please Enter a Valid Street</p>}\r\n      </div>\r\n      <div className={postalCodeInputClasses}>\r\n        <label htmlFor='postal'>Postal Code</label>\r\n        <input type='text' id='postal' ref={postalCodeInputRef} />\r\n        {!formValidity.postalCode && <p>Please Enter a Valid Postal Code (atleast 5 digit)</p>}\r\n      </div>\r\n      <div className={cityInputClasses}>\r\n        <label htmlFor='city'>City</label>\r\n        <input type='text' id='city' ref={cityInputRef} />\r\n        {!formValidity.city && <p>Please Enter a Valid City</p>}\r\n      </div>\r\n      <div className={classes.actions}>\r\n        <button type='button' onClick={props.onCancel}>\r\n          Cancel\r\n        </button>\r\n        <button className={classes.submit}>Confirm</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default CheckOut;\r\n"]},"metadata":{},"sourceType":"module"}